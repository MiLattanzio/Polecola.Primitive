namespace Polecola.Primitive.Test;

/// <summary>
/// Test class to validate the functionality of character-related operations, particularly
/// how characters are interpreted and manipulated as binary or boolean representations.
/// </summary>
/// <remarks>
/// This class contains test methods to assess the accuracy of converting characters to boolean arrays,
/// manipulating specific bits within the boolean array, and reconstructing the character from such arrays,
/// confirming the integrity of the transformation at each step.
/// </remarks>
[TestFixture]
public class CharTest
{
    /// <summary>
    /// Converts a char value to a boolean array representation.
    /// </summary>
    /// <remarks>
    /// This method transforms the binary representation of a char value into an array of booleans,
    /// where each boolean corresponds to a specific bit in the char's internal binary structure.
    /// The length of the resulting array is determined by the bit-width of a char in memory.
    /// </remarks>
    [Test]
    public void ToBoolArrayTest()
    {
        foreach (var b in Enumerable.Range(char.MinValue, char.MaxValue))
        {
            var value = (char)b;
            Assert.That(b, Is.EqualTo(value));
            var bools = value.ToBoolArray();
            var result = bools.ToChar();
            Assert.That(result, Is.EqualTo(value));
            var bytes = bools.ToByteArray();
            Assert.That(bytes, Has.Length.EqualTo(2));
            var valueBack = bytes.ToChar();
            Assert.That(valueBack, Is.EqualTo(value));
        }
    }

    /// <summary>
    /// Retrieves the boolean value at a specific bit index within the binary representation of a char.
    /// </summary>
    /// <remarks>
    /// This method determines the value of a particular bit in a char's binary structure, as represented in a boolean array format.
    /// Useful for inspecting or querying individual bits of a char without converting it to a different type.
    /// </remarks>
    [Test]
    public void GetBoolAtIndexTest()
    {
        var bytes = new byte[] { 0x0, 0x0 };
        Random.Shared.NextBytes(bytes);
        var value = bytes.ToChar();
        var bools = value.ToBoolArray();
        for (var index = 0; index < bools.Length; index++)
        {
            var boolAtIndex = bools[index];
            Assert.That(value.GetBoolAtIndex((uint)index), Is.EqualTo(boolAtIndex));
        }
    }


    /// <summary>
    /// Sets the boolean value of a specific bit at the specified index within the binary representation of a char value.
    /// </summary>
    /// <remarks>
    /// This method modifies the binary representation of a char by setting the bit at the given index
    /// to the provided boolean value. If the value is true, the corresponding bit is set to 1; otherwise, it is set to 0.
    /// The resulting char maintains its binary integrity while reflecting the change at the specified index.
    /// </remarks>
    [Test]
    public void SetBoolAtIndexTest()
    {
        var bytes = new byte[] { 0x0, 0x0 };
        Random.Shared.NextBytes(bytes);
        var value = bytes.ToChar();
        var valueInverted = (char)~value;
        var bools = value.ToBoolArray();
        var boolsInverted = bools.Select(x => !x).ToArray();
        for (var index = 0; index < boolsInverted.Length; index++)
        {
            var boolAtIndex = boolsInverted[index];
            value = value.SetBoolAtIndex((uint)index, boolAtIndex);
        }
        Assert.That(valueInverted, Is.EqualTo(value));
    }

    /// <summary>
    /// Validates the Char.Count method by comparing its result with the total count
    /// of characters generated by creating a range from char.MinValue to char.MaxValue.
    /// </summary>
    /// <remarks>
    /// This method computes the total number of characters within the full range of possible char values
    /// by counting all individual characters generated using Enumerable.Range. It asserts that this count
    /// matches the result of the Char.Count method to ensure the correctness of the implementation.
    /// </remarks>
    [Test]
    public void CountTest()
    {
        var count = Enumerable.Range(char.MinValue, char.MaxValue).Count();
        Assert.That(count, Is.EqualTo(Char.Count()));
    }

    /// <summary>
    /// Validates that the <see cref="Char.Range(char, char, char)"/> method produces a sequence of characters
    /// matching the expected range from char.MinValue to char.MaxValue.
    /// </summary>
    /// <remarks>
    /// This test ensures that all characters within the Unicode space, from the smallest value (char.MinValue)
    /// to the largest value (char.MaxValue), are accurately included in the sequence generated by the Range method.
    /// The validation is performed by comparing the output of the Range method to a manually generated
    /// equivalent list of characters.
    /// </remarks>
    [Test]
    public void RangeTest()
    {
        var chars = Enumerable.Range(char.MinValue, char.MaxValue).Select(b => (char)b).ToList();
        var allChars = Char.Range(char.MinValue, char.MaxValue);
        Assert.That(allChars, Is.EquivalentTo(chars));
    }
}